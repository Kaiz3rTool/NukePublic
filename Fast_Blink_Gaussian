set cut_paste_input [stack 0]
version 11.1 v1
push $cut_paste_input
Group {
name Fast_Blink_Gaussian
selected true
xpos -860
ypos 115
addUserKnob {20 User}
addUserKnob {6 EnableGPU l "Enable GPU?" +STARTLINE}
EnableGPU true
addUserKnob {14 Scale R 0 100}
Scale 100
addUserKnob {26 "" +STARTLINE}
addUserKnob {3 Quality}
Quality 15
}
Input {
inputs 0
name Input1
xpos 614
ypos -245
}
Reformat {
type scale
scale {{max(parent.Scale.w,parent.Scale.h)>parent.Quality?1/(max(parent.Scale.w,parent.Scale.h)/parent.Quality):1}}
filter Notch
name Reformat1
xpos 614
ypos -175
}
BlinkScript {
recompileCount 6
ProgramGroup 1
KernelDescription "2 \"gaussian_blur_r_2d\" iterate pixelWise 730976d179159b4751e6a3c5821c225abb8f4418cb3d4a36eb0d912eb7e2a3b6 2 \"src\" Read Ranged1D \"dst\" Write Point 1 \"r\" Float 1 AAAAAA== 1 \"r\" 1 1 4 \"srcrangedAxisMask\" Int 1 1 AAAAAA== \"srcrangeMin\" Int 1 1 AAAAAA== \"srcrangeMax\" Int 1 1 AAAAAA== \"r_max\" Int 1 1 AAAAAA=="
kernelSource "float gauss(int x, int y, float sigma) \{\n  float pi = 3.1415926f;\n  const float sigsq = sigma*sigma;\n  return( ( 1.f/(2.f*pi*sigsq) ) * exp( -( (x*x + y*y)/(2.f*sigsq) ) ) );\n\}\n\n\nkernel gaussian_blur_r_2d : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRanged1D, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\n  \n  param:\n    const float r;\n  \n  local:\n    int r_max;\n\n  void init()  \{\n    r_max = ceil(r);\n    src.setRange(-r_max, r_max);\n    src.setAxis(eX);\n  \}\n\n  void process()  \{\n    SampleType(src) c(0.f);\n    float norm = 0.f;\n    float w =  0.f;\n    for(int j = -r_max; j <= r_max; j++) \{\n      int i = 0;\n        w = gauss(i, j, r/3.f);\n        c += src(j)*w;\n        norm += w;\n\n    \}\n    dst() = c/norm;\n  \}\n\};\n"
useGPUIfAvailable {{parent.EnableGPU}}
rebuild ""
gaussian_blur_r_2d_r {{max(1,min(parent.Quality,parent.Scale.w))}}
rebuild_finalise ""
maxTileLines 100
name BlinkScript7
xpos 614
ypos -147
}
BlinkScript {
recompileCount 7
ProgramGroup 1
KernelDescription "2 \"gaussian_blur_r_2d\" iterate pixelWise e0dd64739fd02223089b3638d7cf2f84bd79a40e80087d2d7665e7c97dee6ac1 2 \"src\" Read Ranged1D \"dst\" Write Point 1 \"r\" Float 1 AAAAAA== 1 \"r\" 1 1 4 \"srcrangedAxisMask\" Int 1 1 AAAAAA== \"srcrangeMin\" Int 1 1 AAAAAA== \"srcrangeMax\" Int 1 1 AAAAAA== \"r_max\" Int 1 1 AAAAAA=="
kernelSource "float gauss(int x, int y, float sigma) \{\n  float pi = 3.1415926f;\n  const float sigsq = sigma*sigma;\n  return( ( 1.f/(2.f*pi*sigsq) ) * exp( -( (x*x + y*y)/(2.f*sigsq) ) ) );\n\}\n\n\nkernel gaussian_blur_r_2d : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRanged1D, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\n  \n  param:\n    const float r;\n  \n  local:\n    int r_max;\n\n  void init()  \{\n    r_max = ceil(r);\n    src.setRange(-r_max, r_max);\n    src.setAxis(eY);\n  \}\n\n  void process()  \{\n    SampleType(src) c(0.f);\n    float norm = 0.f;\n    float w =  0.f;\n    for(int j = -r_max; j <= r_max; j++) \{\n      int i = 0;\n        w = gauss(i, j, r/3.f);\n        c += src(j)*w;\n        norm += w;\n\n    \}\n    dst() = c/norm;\n  \}\n\};\n"
useGPUIfAvailable {{parent.EnableGPU}}
rebuild ""
gaussian_blur_r_2d_r {{max(1,min(parent.Quality,parent.Scale.h))}}
rebuild_finalise ""
maxTileLines 100
name BlinkScript1
xpos 614
ypos -107
}
Reformat {
type "to box"
box_width {{parent.input.format.w}}
box_height {{parent.input.format.h}}
box_fixed true
scale {{1/(parent.Size>15?1/(parent.Size/15):1)}}
filter Notch
name Reformat2
xpos 614
ypos -71
}
Output {
name Output1
xpos 614
ypos 42
}
end_group
